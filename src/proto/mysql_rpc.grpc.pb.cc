// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mysql_rpc.proto

#include "mysql_rpc.pb.h"
#include "mysql_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rpc {

static const char* DatabaseService_method_names[] = {
  "/rpc.DatabaseService/registerUser",
  "/rpc.DatabaseService/loginUser",
  "/rpc.DatabaseService/InstantUpload",
  "/rpc.DatabaseService/UploadFile",
  "/rpc.DatabaseService/GetUserFilesCount",
  "/rpc.DatabaseService/GetUserFileList",
  "/rpc.DatabaseService/ShareFile",
  "/rpc.DatabaseService/DeleteFile",
  "/rpc.DatabaseService/PvFile",
  "/rpc.DatabaseService/CancelShareFile",
  "/rpc.DatabaseService/SaveFile",
  "/rpc.DatabaseService/PvShareFile",
  "/rpc.DatabaseService/GetShareFilesCount",
  "/rpc.DatabaseService/GetShareFileList",
  "/rpc.DatabaseService/GetRankingFileList",
};

std::unique_ptr< DatabaseService::Stub> DatabaseService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DatabaseService::Stub> stub(new DatabaseService::Stub(channel, options));
  return stub;
}

DatabaseService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_registerUser_(DatabaseService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_loginUser_(DatabaseService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstantUpload_(DatabaseService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UploadFile_(DatabaseService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserFilesCount_(DatabaseService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUserFileList_(DatabaseService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ShareFile_(DatabaseService_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteFile_(DatabaseService_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PvFile_(DatabaseService_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelShareFile_(DatabaseService_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SaveFile_(DatabaseService_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PvShareFile_(DatabaseService_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetShareFilesCount_(DatabaseService_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetShareFileList_(DatabaseService_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRankingFileList_(DatabaseService_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status DatabaseService::Stub::registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::rpc::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::RegisterRequest, ::rpc::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_registerUser_, context, request, response);
}

void DatabaseService::Stub::async::registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::RegisterRequest, ::rpc::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerUser_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_registerUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>* DatabaseService::Stub::PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::RegisterResponse, ::rpc::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_registerUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>* DatabaseService::Stub::AsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncregisterUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::rpc::LoginResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::LoginRequest, ::rpc::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_loginUser_, context, request, response);
}

void DatabaseService::Stub::async::loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::LoginRequest, ::rpc::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loginUser_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_loginUser_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>* DatabaseService::Stub::PrepareAsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::LoginResponse, ::rpc::LoginRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_loginUser_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>* DatabaseService::Stub::AsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncloginUserRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::rpc::Md5Response* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::Md5Request, ::rpc::Md5Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstantUpload_, context, request, response);
}

void DatabaseService::Stub::async::InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::Md5Request, ::rpc::Md5Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantUpload_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstantUpload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>* DatabaseService::Stub::PrepareAsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::Md5Response, ::rpc::Md5Request, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstantUpload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>* DatabaseService::Stub::AsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstantUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::UploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::rpc::UploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::UploadRequest, ::rpc::UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UploadFile_, context, request, response);
}

void DatabaseService::Stub::async::UploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest* request, ::rpc::UploadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::UploadRequest, ::rpc::UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadFile_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::UploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest* request, ::rpc::UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UploadFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::UploadResponse>* DatabaseService::Stub::PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::UploadResponse, ::rpc::UploadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UploadFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::UploadResponse>* DatabaseService::Stub::AsyncUploadFileRaw(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::GetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::rpc::CountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::CountRequest, ::rpc::CountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserFilesCount_, context, request, response);
}

void DatabaseService::Stub::async::GetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest* request, ::rpc::CountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::CountRequest, ::rpc::CountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserFilesCount_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::GetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest* request, ::rpc::CountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserFilesCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::CountResponse>* DatabaseService::Stub::PrepareAsyncGetUserFilesCountRaw(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::CountResponse, ::rpc::CountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserFilesCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::CountResponse>* DatabaseService::Stub::AsyncGetUserFilesCountRaw(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserFilesCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::GetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::rpc::FilesListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::FilesListRequest, ::rpc::FilesListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUserFileList_, context, request, response);
}

void DatabaseService::Stub::async::GetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest* request, ::rpc::FilesListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::FilesListRequest, ::rpc::FilesListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserFileList_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::GetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest* request, ::rpc::FilesListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUserFileList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::FilesListResponse>* DatabaseService::Stub::PrepareAsyncGetUserFileListRaw(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::FilesListResponse, ::rpc::FilesListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUserFileList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::FilesListResponse>* DatabaseService::Stub::AsyncGetUserFileListRaw(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUserFileListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::ShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::rpc::ShareFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::ShareFileRequest, ::rpc::ShareFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ShareFile_, context, request, response);
}

void DatabaseService::Stub::async::ShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest* request, ::rpc::ShareFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::ShareFileRequest, ::rpc::ShareFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareFile_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::ShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest* request, ::rpc::ShareFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ShareFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::ShareFileResponse>* DatabaseService::Stub::PrepareAsyncShareFileRaw(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::ShareFileResponse, ::rpc::ShareFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ShareFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::ShareFileResponse>* DatabaseService::Stub::AsyncShareFileRaw(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncShareFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::DeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::rpc::DeleteFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::DeleteFileRequest, ::rpc::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteFile_, context, request, response);
}

void DatabaseService::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest* request, ::rpc::DeleteFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::DeleteFileRequest, ::rpc::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::DeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest* request, ::rpc::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::DeleteFileResponse>* DatabaseService::Stub::PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::DeleteFileResponse, ::rpc::DeleteFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::DeleteFileResponse>* DatabaseService::Stub::AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::PvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::rpc::PvFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::PvFileRequest, ::rpc::PvFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PvFile_, context, request, response);
}

void DatabaseService::Stub::async::PvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest* request, ::rpc::PvFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::PvFileRequest, ::rpc::PvFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PvFile_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::PvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest* request, ::rpc::PvFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PvFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::PvFileResponse>* DatabaseService::Stub::PrepareAsyncPvFileRaw(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::PvFileResponse, ::rpc::PvFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PvFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::PvFileResponse>* DatabaseService::Stub::AsyncPvFileRaw(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPvFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::CancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::rpc::CancelShareFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::CancelShareFileRequest, ::rpc::CancelShareFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelShareFile_, context, request, response);
}

void DatabaseService::Stub::async::CancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest* request, ::rpc::CancelShareFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::CancelShareFileRequest, ::rpc::CancelShareFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelShareFile_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::CancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest* request, ::rpc::CancelShareFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelShareFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::CancelShareFileResponse>* DatabaseService::Stub::PrepareAsyncCancelShareFileRaw(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::CancelShareFileResponse, ::rpc::CancelShareFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelShareFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::CancelShareFileResponse>* DatabaseService::Stub::AsyncCancelShareFileRaw(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelShareFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::SaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::rpc::SaveFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::SaveFileRequest, ::rpc::SaveFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SaveFile_, context, request, response);
}

void DatabaseService::Stub::async::SaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest* request, ::rpc::SaveFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::SaveFileRequest, ::rpc::SaveFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveFile_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::SaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest* request, ::rpc::SaveFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SaveFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::SaveFileResponse>* DatabaseService::Stub::PrepareAsyncSaveFileRaw(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::SaveFileResponse, ::rpc::SaveFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SaveFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::SaveFileResponse>* DatabaseService::Stub::AsyncSaveFileRaw(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSaveFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::PvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::rpc::PvShareFileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::PvShareFileRequest, ::rpc::PvShareFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PvShareFile_, context, request, response);
}

void DatabaseService::Stub::async::PvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest* request, ::rpc::PvShareFileResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::PvShareFileRequest, ::rpc::PvShareFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PvShareFile_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::PvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest* request, ::rpc::PvShareFileResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PvShareFile_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::PvShareFileResponse>* DatabaseService::Stub::PrepareAsyncPvShareFileRaw(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::PvShareFileResponse, ::rpc::PvShareFileRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PvShareFile_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::PvShareFileResponse>* DatabaseService::Stub::AsyncPvShareFileRaw(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPvShareFileRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::GetShareFilesCount(::grpc::ClientContext* context, const ::rpc::GetShareFilesCountRequest& request, ::rpc::GetShareFilesCountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::GetShareFilesCountRequest, ::rpc::GetShareFilesCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetShareFilesCount_, context, request, response);
}

void DatabaseService::Stub::async::GetShareFilesCount(::grpc::ClientContext* context, const ::rpc::GetShareFilesCountRequest* request, ::rpc::GetShareFilesCountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::GetShareFilesCountRequest, ::rpc::GetShareFilesCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShareFilesCount_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::GetShareFilesCount(::grpc::ClientContext* context, const ::rpc::GetShareFilesCountRequest* request, ::rpc::GetShareFilesCountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShareFilesCount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetShareFilesCountResponse>* DatabaseService::Stub::PrepareAsyncGetShareFilesCountRaw(::grpc::ClientContext* context, const ::rpc::GetShareFilesCountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::GetShareFilesCountResponse, ::rpc::GetShareFilesCountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetShareFilesCount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetShareFilesCountResponse>* DatabaseService::Stub::AsyncGetShareFilesCountRaw(::grpc::ClientContext* context, const ::rpc::GetShareFilesCountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetShareFilesCountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::GetShareFileList(::grpc::ClientContext* context, const ::rpc::GetShareFileListRequest& request, ::rpc::GetShareFileListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::GetShareFileListRequest, ::rpc::GetShareFileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetShareFileList_, context, request, response);
}

void DatabaseService::Stub::async::GetShareFileList(::grpc::ClientContext* context, const ::rpc::GetShareFileListRequest* request, ::rpc::GetShareFileListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::GetShareFileListRequest, ::rpc::GetShareFileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShareFileList_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::GetShareFileList(::grpc::ClientContext* context, const ::rpc::GetShareFileListRequest* request, ::rpc::GetShareFileListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetShareFileList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetShareFileListResponse>* DatabaseService::Stub::PrepareAsyncGetShareFileListRaw(::grpc::ClientContext* context, const ::rpc::GetShareFileListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::GetShareFileListResponse, ::rpc::GetShareFileListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetShareFileList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetShareFileListResponse>* DatabaseService::Stub::AsyncGetShareFileListRaw(::grpc::ClientContext* context, const ::rpc::GetShareFileListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetShareFileListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status DatabaseService::Stub::GetRankingFileList(::grpc::ClientContext* context, const ::rpc::GetRankingFileListRequest& request, ::rpc::GetRankingFileListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::GetRankingFileListRequest, ::rpc::GetRankingFileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRankingFileList_, context, request, response);
}

void DatabaseService::Stub::async::GetRankingFileList(::grpc::ClientContext* context, const ::rpc::GetRankingFileListRequest* request, ::rpc::GetRankingFileListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::GetRankingFileListRequest, ::rpc::GetRankingFileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRankingFileList_, context, request, response, std::move(f));
}

void DatabaseService::Stub::async::GetRankingFileList(::grpc::ClientContext* context, const ::rpc::GetRankingFileListRequest* request, ::rpc::GetRankingFileListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRankingFileList_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetRankingFileListResponse>* DatabaseService::Stub::PrepareAsyncGetRankingFileListRaw(::grpc::ClientContext* context, const ::rpc::GetRankingFileListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::GetRankingFileListResponse, ::rpc::GetRankingFileListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRankingFileList_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::GetRankingFileListResponse>* DatabaseService::Stub::AsyncGetRankingFileListRaw(::grpc::ClientContext* context, const ::rpc::GetRankingFileListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRankingFileListRaw(context, request, cq);
  result->StartCall();
  return result;
}

DatabaseService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::RegisterRequest, ::rpc::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::RegisterRequest* req,
             ::rpc::RegisterResponse* resp) {
               return service->registerUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::LoginRequest, ::rpc::LoginResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::LoginRequest* req,
             ::rpc::LoginResponse* resp) {
               return service->loginUser(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::Md5Request, ::rpc::Md5Response, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::Md5Request* req,
             ::rpc::Md5Response* resp) {
               return service->InstantUpload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::UploadRequest, ::rpc::UploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::UploadRequest* req,
             ::rpc::UploadResponse* resp) {
               return service->UploadFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::CountRequest, ::rpc::CountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::CountRequest* req,
             ::rpc::CountResponse* resp) {
               return service->GetUserFilesCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::FilesListRequest, ::rpc::FilesListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::FilesListRequest* req,
             ::rpc::FilesListResponse* resp) {
               return service->GetUserFileList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::ShareFileRequest, ::rpc::ShareFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::ShareFileRequest* req,
             ::rpc::ShareFileResponse* resp) {
               return service->ShareFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::DeleteFileRequest, ::rpc::DeleteFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::DeleteFileRequest* req,
             ::rpc::DeleteFileResponse* resp) {
               return service->DeleteFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::PvFileRequest, ::rpc::PvFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::PvFileRequest* req,
             ::rpc::PvFileResponse* resp) {
               return service->PvFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::CancelShareFileRequest, ::rpc::CancelShareFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::CancelShareFileRequest* req,
             ::rpc::CancelShareFileResponse* resp) {
               return service->CancelShareFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::SaveFileRequest, ::rpc::SaveFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::SaveFileRequest* req,
             ::rpc::SaveFileResponse* resp) {
               return service->SaveFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::PvShareFileRequest, ::rpc::PvShareFileResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::PvShareFileRequest* req,
             ::rpc::PvShareFileResponse* resp) {
               return service->PvShareFile(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::GetShareFilesCountRequest, ::rpc::GetShareFilesCountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::GetShareFilesCountRequest* req,
             ::rpc::GetShareFilesCountResponse* resp) {
               return service->GetShareFilesCount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::GetShareFileListRequest, ::rpc::GetShareFileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::GetShareFileListRequest* req,
             ::rpc::GetShareFileListResponse* resp) {
               return service->GetShareFileList(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DatabaseService_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< DatabaseService::Service, ::rpc::GetRankingFileListRequest, ::rpc::GetRankingFileListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](DatabaseService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::GetRankingFileListRequest* req,
             ::rpc::GetRankingFileListResponse* resp) {
               return service->GetRankingFileList(ctx, req, resp);
             }, this)));
}

DatabaseService::Service::~Service() {
}

::grpc::Status DatabaseService::Service::registerUser(::grpc::ServerContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::loginUser(::grpc::ServerContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::InstantUpload(::grpc::ServerContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::UploadFile(::grpc::ServerContext* context, const ::rpc::UploadRequest* request, ::rpc::UploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::GetUserFilesCount(::grpc::ServerContext* context, const ::rpc::CountRequest* request, ::rpc::CountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::GetUserFileList(::grpc::ServerContext* context, const ::rpc::FilesListRequest* request, ::rpc::FilesListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::ShareFile(::grpc::ServerContext* context, const ::rpc::ShareFileRequest* request, ::rpc::ShareFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::DeleteFile(::grpc::ServerContext* context, const ::rpc::DeleteFileRequest* request, ::rpc::DeleteFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::PvFile(::grpc::ServerContext* context, const ::rpc::PvFileRequest* request, ::rpc::PvFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::CancelShareFile(::grpc::ServerContext* context, const ::rpc::CancelShareFileRequest* request, ::rpc::CancelShareFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::SaveFile(::grpc::ServerContext* context, const ::rpc::SaveFileRequest* request, ::rpc::SaveFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::PvShareFile(::grpc::ServerContext* context, const ::rpc::PvShareFileRequest* request, ::rpc::PvShareFileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::GetShareFilesCount(::grpc::ServerContext* context, const ::rpc::GetShareFilesCountRequest* request, ::rpc::GetShareFilesCountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::GetShareFileList(::grpc::ServerContext* context, const ::rpc::GetShareFileListRequest* request, ::rpc::GetShareFileListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status DatabaseService::Service::GetRankingFileList(::grpc::ServerContext* context, const ::rpc::GetRankingFileListRequest* request, ::rpc::GetRankingFileListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc

