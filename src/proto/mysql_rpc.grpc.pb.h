// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mysql_rpc.proto
#ifndef GRPC_mysql_5frpc_2eproto__INCLUDED
#define GRPC_mysql_5frpc_2eproto__INCLUDED

#include "mysql_rpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace rpc {

class DatabaseService final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.DatabaseService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::rpc::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::rpc::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>> AsyncloginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>>(AsyncloginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>> PrepareAsyncloginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>>(PrepareAsyncloginUserRaw(context, request, cq));
    }
    virtual ::grpc::Status InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::rpc::Md5Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>> AsyncInstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>>(AsyncInstantUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>> PrepareAsyncInstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>>(PrepareAsyncInstantUploadRaw(context, request, cq));
    }
    virtual ::grpc::Status UploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::rpc::UploadResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::UploadResponse>> AsyncUploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::UploadResponse>>(AsyncUploadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::UploadResponse>> PrepareAsyncUploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::UploadResponse>>(PrepareAsyncUploadFileRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::rpc::CountResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CountResponse>> AsyncGetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CountResponse>>(AsyncGetUserFilesCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CountResponse>> PrepareAsyncGetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CountResponse>>(PrepareAsyncGetUserFilesCountRaw(context, request, cq));
    }
    virtual ::grpc::Status GetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::rpc::FilesListResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FilesListResponse>> AsyncGetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FilesListResponse>>(AsyncGetUserFileListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FilesListResponse>> PrepareAsyncGetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FilesListResponse>>(PrepareAsyncGetUserFileListRaw(context, request, cq));
    }
    virtual ::grpc::Status ShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::rpc::ShareFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ShareFileResponse>> AsyncShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ShareFileResponse>>(AsyncShareFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ShareFileResponse>> PrepareAsyncShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ShareFileResponse>>(PrepareAsyncShareFileRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::rpc::DeleteFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DeleteFileResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DeleteFileResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DeleteFileResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DeleteFileResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    virtual ::grpc::Status PvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::rpc::PvFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvFileResponse>> AsyncPvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvFileResponse>>(AsyncPvFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvFileResponse>> PrepareAsyncPvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvFileResponse>>(PrepareAsyncPvFileRaw(context, request, cq));
    }
    virtual ::grpc::Status CancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::rpc::CancelShareFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CancelShareFileResponse>> AsyncCancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CancelShareFileResponse>>(AsyncCancelShareFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CancelShareFileResponse>> PrepareAsyncCancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CancelShareFileResponse>>(PrepareAsyncCancelShareFileRaw(context, request, cq));
    }
    virtual ::grpc::Status SaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::rpc::SaveFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::SaveFileResponse>> AsyncSaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::SaveFileResponse>>(AsyncSaveFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::SaveFileResponse>> PrepareAsyncSaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::SaveFileResponse>>(PrepareAsyncSaveFileRaw(context, request, cq));
    }
    virtual ::grpc::Status PvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::rpc::PvShareFileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvShareFileResponse>> AsyncPvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvShareFileResponse>>(AsyncPvShareFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvShareFileResponse>> PrepareAsyncPvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvShareFileResponse>>(PrepareAsyncPvShareFileRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest* request, ::rpc::UploadResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest* request, ::rpc::UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest* request, ::rpc::CountResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest* request, ::rpc::CountResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest* request, ::rpc::FilesListResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest* request, ::rpc::FilesListResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest* request, ::rpc::ShareFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest* request, ::rpc::ShareFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest* request, ::rpc::DeleteFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest* request, ::rpc::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest* request, ::rpc::PvFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest* request, ::rpc::PvFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void CancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest* request, ::rpc::CancelShareFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest* request, ::rpc::CancelShareFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest* request, ::rpc::SaveFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest* request, ::rpc::SaveFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest* request, ::rpc::PvShareFileResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest* request, ::rpc::PvShareFileResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>* AsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>* PrepareAsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>* AsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>* PrepareAsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::UploadResponse>* AsyncUploadFileRaw(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::UploadResponse>* PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CountResponse>* AsyncGetUserFilesCountRaw(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CountResponse>* PrepareAsyncGetUserFilesCountRaw(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FilesListResponse>* AsyncGetUserFileListRaw(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::FilesListResponse>* PrepareAsyncGetUserFileListRaw(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ShareFileResponse>* AsyncShareFileRaw(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::ShareFileResponse>* PrepareAsyncShareFileRaw(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DeleteFileResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::DeleteFileResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvFileResponse>* AsyncPvFileRaw(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvFileResponse>* PrepareAsyncPvFileRaw(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CancelShareFileResponse>* AsyncCancelShareFileRaw(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::CancelShareFileResponse>* PrepareAsyncCancelShareFileRaw(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::SaveFileResponse>* AsyncSaveFileRaw(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::SaveFileResponse>* PrepareAsyncSaveFileRaw(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvShareFileResponse>* AsyncPvShareFileRaw(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::PvShareFileResponse>* PrepareAsyncPvShareFileRaw(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::rpc::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    ::grpc::Status loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::rpc::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>> AsyncloginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>>(AsyncloginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>> PrepareAsyncloginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>>(PrepareAsyncloginUserRaw(context, request, cq));
    }
    ::grpc::Status InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::rpc::Md5Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>> AsyncInstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>>(AsyncInstantUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>> PrepareAsyncInstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>>(PrepareAsyncInstantUploadRaw(context, request, cq));
    }
    ::grpc::Status UploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::rpc::UploadResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::UploadResponse>> AsyncUploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::UploadResponse>>(AsyncUploadFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::UploadResponse>> PrepareAsyncUploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::UploadResponse>>(PrepareAsyncUploadFileRaw(context, request, cq));
    }
    ::grpc::Status GetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::rpc::CountResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CountResponse>> AsyncGetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CountResponse>>(AsyncGetUserFilesCountRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CountResponse>> PrepareAsyncGetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CountResponse>>(PrepareAsyncGetUserFilesCountRaw(context, request, cq));
    }
    ::grpc::Status GetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::rpc::FilesListResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FilesListResponse>> AsyncGetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FilesListResponse>>(AsyncGetUserFileListRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FilesListResponse>> PrepareAsyncGetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::FilesListResponse>>(PrepareAsyncGetUserFileListRaw(context, request, cq));
    }
    ::grpc::Status ShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::rpc::ShareFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ShareFileResponse>> AsyncShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ShareFileResponse>>(AsyncShareFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ShareFileResponse>> PrepareAsyncShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::ShareFileResponse>>(PrepareAsyncShareFileRaw(context, request, cq));
    }
    ::grpc::Status DeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::rpc::DeleteFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::DeleteFileResponse>> AsyncDeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::DeleteFileResponse>>(AsyncDeleteFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::DeleteFileResponse>> PrepareAsyncDeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::DeleteFileResponse>>(PrepareAsyncDeleteFileRaw(context, request, cq));
    }
    ::grpc::Status PvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::rpc::PvFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PvFileResponse>> AsyncPvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PvFileResponse>>(AsyncPvFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PvFileResponse>> PrepareAsyncPvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PvFileResponse>>(PrepareAsyncPvFileRaw(context, request, cq));
    }
    ::grpc::Status CancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::rpc::CancelShareFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CancelShareFileResponse>> AsyncCancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CancelShareFileResponse>>(AsyncCancelShareFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CancelShareFileResponse>> PrepareAsyncCancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::CancelShareFileResponse>>(PrepareAsyncCancelShareFileRaw(context, request, cq));
    }
    ::grpc::Status SaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::rpc::SaveFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::SaveFileResponse>> AsyncSaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::SaveFileResponse>>(AsyncSaveFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::SaveFileResponse>> PrepareAsyncSaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::SaveFileResponse>>(PrepareAsyncSaveFileRaw(context, request, cq));
    }
    ::grpc::Status PvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::rpc::PvShareFileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PvShareFileResponse>> AsyncPvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PvShareFileResponse>>(AsyncPvShareFileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PvShareFileResponse>> PrepareAsyncPvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::PvShareFileResponse>>(PrepareAsyncPvShareFileRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, std::function<void(::grpc::Status)>) override;
      void InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest* request, ::rpc::UploadResponse* response, std::function<void(::grpc::Status)>) override;
      void UploadFile(::grpc::ClientContext* context, const ::rpc::UploadRequest* request, ::rpc::UploadResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest* request, ::rpc::CountResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserFilesCount(::grpc::ClientContext* context, const ::rpc::CountRequest* request, ::rpc::CountResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest* request, ::rpc::FilesListResponse* response, std::function<void(::grpc::Status)>) override;
      void GetUserFileList(::grpc::ClientContext* context, const ::rpc::FilesListRequest* request, ::rpc::FilesListResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest* request, ::rpc::ShareFileResponse* response, std::function<void(::grpc::Status)>) override;
      void ShareFile(::grpc::ClientContext* context, const ::rpc::ShareFileRequest* request, ::rpc::ShareFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest* request, ::rpc::DeleteFileResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteFile(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest* request, ::rpc::DeleteFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest* request, ::rpc::PvFileResponse* response, std::function<void(::grpc::Status)>) override;
      void PvFile(::grpc::ClientContext* context, const ::rpc::PvFileRequest* request, ::rpc::PvFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest* request, ::rpc::CancelShareFileResponse* response, std::function<void(::grpc::Status)>) override;
      void CancelShareFile(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest* request, ::rpc::CancelShareFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest* request, ::rpc::SaveFileResponse* response, std::function<void(::grpc::Status)>) override;
      void SaveFile(::grpc::ClientContext* context, const ::rpc::SaveFileRequest* request, ::rpc::SaveFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest* request, ::rpc::PvShareFileResponse* response, std::function<void(::grpc::Status)>) override;
      void PvShareFile(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest* request, ::rpc::PvShareFileResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>* AsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>* PrepareAsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>* AsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>* PrepareAsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::UploadResponse>* AsyncUploadFileRaw(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::UploadResponse>* PrepareAsyncUploadFileRaw(::grpc::ClientContext* context, const ::rpc::UploadRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::CountResponse>* AsyncGetUserFilesCountRaw(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::CountResponse>* PrepareAsyncGetUserFilesCountRaw(::grpc::ClientContext* context, const ::rpc::CountRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::FilesListResponse>* AsyncGetUserFileListRaw(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::FilesListResponse>* PrepareAsyncGetUserFileListRaw(::grpc::ClientContext* context, const ::rpc::FilesListRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ShareFileResponse>* AsyncShareFileRaw(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::ShareFileResponse>* PrepareAsyncShareFileRaw(::grpc::ClientContext* context, const ::rpc::ShareFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::DeleteFileResponse>* AsyncDeleteFileRaw(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::DeleteFileResponse>* PrepareAsyncDeleteFileRaw(::grpc::ClientContext* context, const ::rpc::DeleteFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::PvFileResponse>* AsyncPvFileRaw(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::PvFileResponse>* PrepareAsyncPvFileRaw(::grpc::ClientContext* context, const ::rpc::PvFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::CancelShareFileResponse>* AsyncCancelShareFileRaw(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::CancelShareFileResponse>* PrepareAsyncCancelShareFileRaw(::grpc::ClientContext* context, const ::rpc::CancelShareFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::SaveFileResponse>* AsyncSaveFileRaw(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::SaveFileResponse>* PrepareAsyncSaveFileRaw(::grpc::ClientContext* context, const ::rpc::SaveFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::PvShareFileResponse>* AsyncPvShareFileRaw(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::PvShareFileResponse>* PrepareAsyncPvShareFileRaw(::grpc::ClientContext* context, const ::rpc::PvShareFileRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_registerUser_;
    const ::grpc::internal::RpcMethod rpcmethod_loginUser_;
    const ::grpc::internal::RpcMethod rpcmethod_InstantUpload_;
    const ::grpc::internal::RpcMethod rpcmethod_UploadFile_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserFilesCount_;
    const ::grpc::internal::RpcMethod rpcmethod_GetUserFileList_;
    const ::grpc::internal::RpcMethod rpcmethod_ShareFile_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteFile_;
    const ::grpc::internal::RpcMethod rpcmethod_PvFile_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelShareFile_;
    const ::grpc::internal::RpcMethod rpcmethod_SaveFile_;
    const ::grpc::internal::RpcMethod rpcmethod_PvShareFile_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status registerUser(::grpc::ServerContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response);
    virtual ::grpc::Status loginUser(::grpc::ServerContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response);
    virtual ::grpc::Status InstantUpload(::grpc::ServerContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response);
    virtual ::grpc::Status UploadFile(::grpc::ServerContext* context, const ::rpc::UploadRequest* request, ::rpc::UploadResponse* response);
    virtual ::grpc::Status GetUserFilesCount(::grpc::ServerContext* context, const ::rpc::CountRequest* request, ::rpc::CountResponse* response);
    virtual ::grpc::Status GetUserFileList(::grpc::ServerContext* context, const ::rpc::FilesListRequest* request, ::rpc::FilesListResponse* response);
    virtual ::grpc::Status ShareFile(::grpc::ServerContext* context, const ::rpc::ShareFileRequest* request, ::rpc::ShareFileResponse* response);
    virtual ::grpc::Status DeleteFile(::grpc::ServerContext* context, const ::rpc::DeleteFileRequest* request, ::rpc::DeleteFileResponse* response);
    virtual ::grpc::Status PvFile(::grpc::ServerContext* context, const ::rpc::PvFileRequest* request, ::rpc::PvFileResponse* response);
    virtual ::grpc::Status CancelShareFile(::grpc::ServerContext* context, const ::rpc::CancelShareFileRequest* request, ::rpc::CancelShareFileResponse* response);
    virtual ::grpc::Status SaveFile(::grpc::ServerContext* context, const ::rpc::SaveFileRequest* request, ::rpc::SaveFileResponse* response);
    virtual ::grpc::Status PvShareFile(::grpc::ServerContext* context, const ::rpc::PvShareFileRequest* request, ::rpc::PvShareFileResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::rpc::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loginUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloginUser(::grpc::ServerContext* context, ::rpc::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstantUpload() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstantUpload(::grpc::ServerContext* context, ::rpc::Md5Request* request, ::grpc::ServerAsyncResponseWriter< ::rpc::Md5Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadFile() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::rpc::UploadRequest* /*request*/, ::rpc::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadFile(::grpc::ServerContext* context, ::rpc::UploadRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::UploadResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserFilesCount() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetUserFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFilesCount(::grpc::ServerContext* /*context*/, const ::rpc::CountRequest* /*request*/, ::rpc::CountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserFilesCount(::grpc::ServerContext* context, ::rpc::CountRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::CountResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetUserFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetUserFileList() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetUserFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFileList(::grpc::ServerContext* /*context*/, const ::rpc::FilesListRequest* /*request*/, ::rpc::FilesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserFileList(::grpc::ServerContext* context, ::rpc::FilesListRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::FilesListResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ShareFile() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_ShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareFile(::grpc::ServerContext* /*context*/, const ::rpc::ShareFileRequest* /*request*/, ::rpc::ShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareFile(::grpc::ServerContext* context, ::rpc::ShareFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::ShareFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteFile() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::rpc::DeleteFileRequest* /*request*/, ::rpc::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::rpc::DeleteFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::DeleteFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PvFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PvFile() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_PvFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvFile(::grpc::ServerContext* /*context*/, const ::rpc::PvFileRequest* /*request*/, ::rpc::PvFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPvFile(::grpc::ServerContext* context, ::rpc::PvFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::PvFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelShareFile() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_CancelShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelShareFile(::grpc::ServerContext* /*context*/, const ::rpc::CancelShareFileRequest* /*request*/, ::rpc::CancelShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelShareFile(::grpc::ServerContext* context, ::rpc::CancelShareFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::CancelShareFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SaveFile() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::rpc::SaveFileRequest* /*request*/, ::rpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveFile(::grpc::ServerContext* context, ::rpc::SaveFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::SaveFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PvShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PvShareFile() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_PvShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvShareFile(::grpc::ServerContext* /*context*/, const ::rpc::PvShareFileRequest* /*request*/, ::rpc::PvShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPvShareFile(::grpc::ServerContext* context, ::rpc::PvShareFileRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::PvShareFileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerUser<WithAsyncMethod_loginUser<WithAsyncMethod_InstantUpload<WithAsyncMethod_UploadFile<WithAsyncMethod_GetUserFilesCount<WithAsyncMethod_GetUserFileList<WithAsyncMethod_ShareFile<WithAsyncMethod_DeleteFile<WithAsyncMethod_PvFile<WithAsyncMethod_CancelShareFile<WithAsyncMethod_SaveFile<WithAsyncMethod_PvShareFile<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_registerUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::RegisterRequest, ::rpc::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response) { return this->registerUser(context, request, response); }));}
    void SetMessageAllocatorFor_registerUser(
        ::grpc::MessageAllocator< ::rpc::RegisterRequest, ::rpc::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::RegisterRequest, ::rpc::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerUser(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loginUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::LoginRequest, ::rpc::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response) { return this->loginUser(context, request, response); }));}
    void SetMessageAllocatorFor_loginUser(
        ::grpc::MessageAllocator< ::rpc::LoginRequest, ::rpc::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::LoginRequest, ::rpc::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InstantUpload() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::Md5Request, ::rpc::Md5Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response) { return this->InstantUpload(context, request, response); }));}
    void SetMessageAllocatorFor_InstantUpload(
        ::grpc::MessageAllocator< ::rpc::Md5Request, ::rpc::Md5Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::Md5Request, ::rpc::Md5Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstantUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadFile() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::UploadRequest, ::rpc::UploadResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::UploadRequest* request, ::rpc::UploadResponse* response) { return this->UploadFile(context, request, response); }));}
    void SetMessageAllocatorFor_UploadFile(
        ::grpc::MessageAllocator< ::rpc::UploadRequest, ::rpc::UploadResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::UploadRequest, ::rpc::UploadResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::rpc::UploadRequest* /*request*/, ::rpc::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::UploadRequest* /*request*/, ::rpc::UploadResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUserFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserFilesCount() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::CountRequest, ::rpc::CountResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::CountRequest* request, ::rpc::CountResponse* response) { return this->GetUserFilesCount(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserFilesCount(
        ::grpc::MessageAllocator< ::rpc::CountRequest, ::rpc::CountResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::CountRequest, ::rpc::CountResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFilesCount(::grpc::ServerContext* /*context*/, const ::rpc::CountRequest* /*request*/, ::rpc::CountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserFilesCount(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::CountRequest* /*request*/, ::rpc::CountResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetUserFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetUserFileList() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::FilesListRequest, ::rpc::FilesListResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::FilesListRequest* request, ::rpc::FilesListResponse* response) { return this->GetUserFileList(context, request, response); }));}
    void SetMessageAllocatorFor_GetUserFileList(
        ::grpc::MessageAllocator< ::rpc::FilesListRequest, ::rpc::FilesListResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::FilesListRequest, ::rpc::FilesListResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetUserFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFileList(::grpc::ServerContext* /*context*/, const ::rpc::FilesListRequest* /*request*/, ::rpc::FilesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserFileList(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::FilesListRequest* /*request*/, ::rpc::FilesListResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ShareFile() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::ShareFileRequest, ::rpc::ShareFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::ShareFileRequest* request, ::rpc::ShareFileResponse* response) { return this->ShareFile(context, request, response); }));}
    void SetMessageAllocatorFor_ShareFile(
        ::grpc::MessageAllocator< ::rpc::ShareFileRequest, ::rpc::ShareFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::ShareFileRequest, ::rpc::ShareFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareFile(::grpc::ServerContext* /*context*/, const ::rpc::ShareFileRequest* /*request*/, ::rpc::ShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareFile(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::ShareFileRequest* /*request*/, ::rpc::ShareFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::DeleteFileRequest, ::rpc::DeleteFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::DeleteFileRequest* request, ::rpc::DeleteFileResponse* response) { return this->DeleteFile(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteFile(
        ::grpc::MessageAllocator< ::rpc::DeleteFileRequest, ::rpc::DeleteFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::DeleteFileRequest, ::rpc::DeleteFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::rpc::DeleteFileRequest* /*request*/, ::rpc::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::DeleteFileRequest* /*request*/, ::rpc::DeleteFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PvFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PvFile() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::PvFileRequest, ::rpc::PvFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::PvFileRequest* request, ::rpc::PvFileResponse* response) { return this->PvFile(context, request, response); }));}
    void SetMessageAllocatorFor_PvFile(
        ::grpc::MessageAllocator< ::rpc::PvFileRequest, ::rpc::PvFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::PvFileRequest, ::rpc::PvFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PvFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvFile(::grpc::ServerContext* /*context*/, const ::rpc::PvFileRequest* /*request*/, ::rpc::PvFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PvFile(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::PvFileRequest* /*request*/, ::rpc::PvFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelShareFile() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::CancelShareFileRequest, ::rpc::CancelShareFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::CancelShareFileRequest* request, ::rpc::CancelShareFileResponse* response) { return this->CancelShareFile(context, request, response); }));}
    void SetMessageAllocatorFor_CancelShareFile(
        ::grpc::MessageAllocator< ::rpc::CancelShareFileRequest, ::rpc::CancelShareFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::CancelShareFileRequest, ::rpc::CancelShareFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelShareFile(::grpc::ServerContext* /*context*/, const ::rpc::CancelShareFileRequest* /*request*/, ::rpc::CancelShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelShareFile(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::CancelShareFileRequest* /*request*/, ::rpc::CancelShareFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SaveFile() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::SaveFileRequest, ::rpc::SaveFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::SaveFileRequest* request, ::rpc::SaveFileResponse* response) { return this->SaveFile(context, request, response); }));}
    void SetMessageAllocatorFor_SaveFile(
        ::grpc::MessageAllocator< ::rpc::SaveFileRequest, ::rpc::SaveFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::SaveFileRequest, ::rpc::SaveFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::rpc::SaveFileRequest* /*request*/, ::rpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SaveFile(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::SaveFileRequest* /*request*/, ::rpc::SaveFileResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PvShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PvShareFile() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::PvShareFileRequest, ::rpc::PvShareFileResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::PvShareFileRequest* request, ::rpc::PvShareFileResponse* response) { return this->PvShareFile(context, request, response); }));}
    void SetMessageAllocatorFor_PvShareFile(
        ::grpc::MessageAllocator< ::rpc::PvShareFileRequest, ::rpc::PvShareFileResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::PvShareFileRequest, ::rpc::PvShareFileResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PvShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvShareFile(::grpc::ServerContext* /*context*/, const ::rpc::PvShareFileRequest* /*request*/, ::rpc::PvShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PvShareFile(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::PvShareFileRequest* /*request*/, ::rpc::PvShareFileResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_registerUser<WithCallbackMethod_loginUser<WithCallbackMethod_InstantUpload<WithCallbackMethod_UploadFile<WithCallbackMethod_GetUserFilesCount<WithCallbackMethod_GetUserFileList<WithCallbackMethod_ShareFile<WithCallbackMethod_DeleteFile<WithCallbackMethod_PvFile<WithCallbackMethod_CancelShareFile<WithCallbackMethod_SaveFile<WithCallbackMethod_PvShareFile<Service > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loginUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstantUpload() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadFile() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::rpc::UploadRequest* /*request*/, ::rpc::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserFilesCount() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetUserFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFilesCount(::grpc::ServerContext* /*context*/, const ::rpc::CountRequest* /*request*/, ::rpc::CountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetUserFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetUserFileList() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetUserFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFileList(::grpc::ServerContext* /*context*/, const ::rpc::FilesListRequest* /*request*/, ::rpc::FilesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ShareFile() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_ShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareFile(::grpc::ServerContext* /*context*/, const ::rpc::ShareFileRequest* /*request*/, ::rpc::ShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteFile() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::rpc::DeleteFileRequest* /*request*/, ::rpc::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PvFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PvFile() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_PvFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvFile(::grpc::ServerContext* /*context*/, const ::rpc::PvFileRequest* /*request*/, ::rpc::PvFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelShareFile() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_CancelShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelShareFile(::grpc::ServerContext* /*context*/, const ::rpc::CancelShareFileRequest* /*request*/, ::rpc::CancelShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SaveFile() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::rpc::SaveFileRequest* /*request*/, ::rpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PvShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PvShareFile() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_PvShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvShareFile(::grpc::ServerContext* /*context*/, const ::rpc::PvShareFileRequest* /*request*/, ::rpc::PvShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loginUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloginUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstantUpload() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstantUpload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadFile() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::rpc::UploadRequest* /*request*/, ::rpc::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserFilesCount() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetUserFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFilesCount(::grpc::ServerContext* /*context*/, const ::rpc::CountRequest* /*request*/, ::rpc::CountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserFilesCount(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetUserFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetUserFileList() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetUserFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFileList(::grpc::ServerContext* /*context*/, const ::rpc::FilesListRequest* /*request*/, ::rpc::FilesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetUserFileList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ShareFile() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_ShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareFile(::grpc::ServerContext* /*context*/, const ::rpc::ShareFileRequest* /*request*/, ::rpc::ShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestShareFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::rpc::DeleteFileRequest* /*request*/, ::rpc::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PvFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PvFile() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_PvFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvFile(::grpc::ServerContext* /*context*/, const ::rpc::PvFileRequest* /*request*/, ::rpc::PvFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPvFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelShareFile() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_CancelShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelShareFile(::grpc::ServerContext* /*context*/, const ::rpc::CancelShareFileRequest* /*request*/, ::rpc::CancelShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelShareFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SaveFile() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::rpc::SaveFileRequest* /*request*/, ::rpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSaveFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PvShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PvShareFile() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_PvShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvShareFile(::grpc::ServerContext* /*context*/, const ::rpc::PvShareFileRequest* /*request*/, ::rpc::PvShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPvShareFile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_registerUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loginUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loginUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InstantUpload() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstantUpload(context, request, response); }));
    }
    ~WithRawCallbackMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstantUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadFile() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UploadFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::rpc::UploadRequest* /*request*/, ::rpc::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UploadFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserFilesCount() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserFilesCount(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFilesCount(::grpc::ServerContext* /*context*/, const ::rpc::CountRequest* /*request*/, ::rpc::CountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserFilesCount(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetUserFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetUserFileList() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetUserFileList(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetUserFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetUserFileList(::grpc::ServerContext* /*context*/, const ::rpc::FilesListRequest* /*request*/, ::rpc::FilesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetUserFileList(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ShareFile() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ShareFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_ShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ShareFile(::grpc::ServerContext* /*context*/, const ::rpc::ShareFileRequest* /*request*/, ::rpc::ShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ShareFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteFile() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::rpc::DeleteFileRequest* /*request*/, ::rpc::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PvFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PvFile() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PvFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_PvFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvFile(::grpc::ServerContext* /*context*/, const ::rpc::PvFileRequest* /*request*/, ::rpc::PvFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PvFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelShareFile() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelShareFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelShareFile(::grpc::ServerContext* /*context*/, const ::rpc::CancelShareFileRequest* /*request*/, ::rpc::CancelShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelShareFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SaveFile() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SaveFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::rpc::SaveFileRequest* /*request*/, ::rpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SaveFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PvShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PvShareFile() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PvShareFile(context, request, response); }));
    }
    ~WithRawCallbackMethod_PvShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PvShareFile(::grpc::ServerContext* /*context*/, const ::rpc::PvShareFileRequest* /*request*/, ::rpc::PvShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PvShareFile(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::RegisterRequest, ::rpc::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::RegisterRequest, ::rpc::RegisterResponse>* streamer) {
                       return this->StreamedregisterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::RegisterRequest,::rpc::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loginUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::LoginRequest, ::rpc::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::LoginRequest, ::rpc::LoginResponse>* streamer) {
                       return this->StreamedloginUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloginUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::LoginRequest,::rpc::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstantUpload() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::Md5Request, ::rpc::Md5Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::Md5Request, ::rpc::Md5Response>* streamer) {
                       return this->StreamedInstantUpload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstantUpload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::Md5Request,::rpc::Md5Response>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UploadFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UploadFile() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::UploadRequest, ::rpc::UploadResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::UploadRequest, ::rpc::UploadResponse>* streamer) {
                       return this->StreamedUploadFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UploadFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UploadFile(::grpc::ServerContext* /*context*/, const ::rpc::UploadRequest* /*request*/, ::rpc::UploadResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUploadFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::UploadRequest,::rpc::UploadResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserFilesCount : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserFilesCount() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::CountRequest, ::rpc::CountResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::CountRequest, ::rpc::CountResponse>* streamer) {
                       return this->StreamedGetUserFilesCount(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserFilesCount() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserFilesCount(::grpc::ServerContext* /*context*/, const ::rpc::CountRequest* /*request*/, ::rpc::CountResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserFilesCount(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::CountRequest,::rpc::CountResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetUserFileList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetUserFileList() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::FilesListRequest, ::rpc::FilesListResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::FilesListRequest, ::rpc::FilesListResponse>* streamer) {
                       return this->StreamedGetUserFileList(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetUserFileList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetUserFileList(::grpc::ServerContext* /*context*/, const ::rpc::FilesListRequest* /*request*/, ::rpc::FilesListResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetUserFileList(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::FilesListRequest,::rpc::FilesListResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ShareFile() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::ShareFileRequest, ::rpc::ShareFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::ShareFileRequest, ::rpc::ShareFileResponse>* streamer) {
                       return this->StreamedShareFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ShareFile(::grpc::ServerContext* /*context*/, const ::rpc::ShareFileRequest* /*request*/, ::rpc::ShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedShareFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::ShareFileRequest,::rpc::ShareFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteFile() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::DeleteFileRequest, ::rpc::DeleteFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::DeleteFileRequest, ::rpc::DeleteFileResponse>* streamer) {
                       return this->StreamedDeleteFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteFile(::grpc::ServerContext* /*context*/, const ::rpc::DeleteFileRequest* /*request*/, ::rpc::DeleteFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::DeleteFileRequest,::rpc::DeleteFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PvFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PvFile() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::PvFileRequest, ::rpc::PvFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::PvFileRequest, ::rpc::PvFileResponse>* streamer) {
                       return this->StreamedPvFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PvFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PvFile(::grpc::ServerContext* /*context*/, const ::rpc::PvFileRequest* /*request*/, ::rpc::PvFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPvFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::PvFileRequest,::rpc::PvFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelShareFile() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::CancelShareFileRequest, ::rpc::CancelShareFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::CancelShareFileRequest, ::rpc::CancelShareFileResponse>* streamer) {
                       return this->StreamedCancelShareFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelShareFile(::grpc::ServerContext* /*context*/, const ::rpc::CancelShareFileRequest* /*request*/, ::rpc::CancelShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelShareFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::CancelShareFileRequest,::rpc::CancelShareFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SaveFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SaveFile() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::SaveFileRequest, ::rpc::SaveFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::SaveFileRequest, ::rpc::SaveFileResponse>* streamer) {
                       return this->StreamedSaveFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SaveFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SaveFile(::grpc::ServerContext* /*context*/, const ::rpc::SaveFileRequest* /*request*/, ::rpc::SaveFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSaveFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::SaveFileRequest,::rpc::SaveFileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PvShareFile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PvShareFile() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::PvShareFileRequest, ::rpc::PvShareFileResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::PvShareFileRequest, ::rpc::PvShareFileResponse>* streamer) {
                       return this->StreamedPvShareFile(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PvShareFile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PvShareFile(::grpc::ServerContext* /*context*/, const ::rpc::PvShareFileRequest* /*request*/, ::rpc::PvShareFileResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPvShareFile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::PvShareFileRequest,::rpc::PvShareFileResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_loginUser<WithStreamedUnaryMethod_InstantUpload<WithStreamedUnaryMethod_UploadFile<WithStreamedUnaryMethod_GetUserFilesCount<WithStreamedUnaryMethod_GetUserFileList<WithStreamedUnaryMethod_ShareFile<WithStreamedUnaryMethod_DeleteFile<WithStreamedUnaryMethod_PvFile<WithStreamedUnaryMethod_CancelShareFile<WithStreamedUnaryMethod_SaveFile<WithStreamedUnaryMethod_PvShareFile<Service > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_loginUser<WithStreamedUnaryMethod_InstantUpload<WithStreamedUnaryMethod_UploadFile<WithStreamedUnaryMethod_GetUserFilesCount<WithStreamedUnaryMethod_GetUserFileList<WithStreamedUnaryMethod_ShareFile<WithStreamedUnaryMethod_DeleteFile<WithStreamedUnaryMethod_PvFile<WithStreamedUnaryMethod_CancelShareFile<WithStreamedUnaryMethod_SaveFile<WithStreamedUnaryMethod_PvShareFile<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace rpc


#endif  // GRPC_mysql_5frpc_2eproto__INCLUDED
