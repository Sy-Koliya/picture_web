// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: mysql_rpc.proto
#ifndef GRPC_mysql_5frpc_2eproto__INCLUDED
#define GRPC_mysql_5frpc_2eproto__INCLUDED

#include "mysql_rpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace rpc {

class DatabaseService final {
 public:
  static constexpr char const* service_full_name() {
    return "rpc.DatabaseService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::rpc::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    virtual ::grpc::Status loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::rpc::LoginResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>> AsyncloginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>>(AsyncloginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>> PrepareAsyncloginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>>(PrepareAsyncloginUserRaw(context, request, cq));
    }
    virtual ::grpc::Status InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::rpc::Md5Response* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>> AsyncInstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>>(AsyncInstantUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>> PrepareAsyncInstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>>(PrepareAsyncInstantUploadRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::RegisterResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>* AsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::LoginResponse>* PrepareAsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>* AsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::rpc::Md5Response>* PrepareAsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::rpc::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>> AsyncregisterUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>>(AsyncregisterUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>> PrepareAsyncregisterUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>>(PrepareAsyncregisterUserRaw(context, request, cq));
    }
    ::grpc::Status loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::rpc::LoginResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>> AsyncloginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>>(AsyncloginUserRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>> PrepareAsyncloginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>>(PrepareAsyncloginUserRaw(context, request, cq));
    }
    ::grpc::Status InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::rpc::Md5Response* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>> AsyncInstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>>(AsyncInstantUploadRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>> PrepareAsyncInstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>>(PrepareAsyncInstantUploadRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void registerUser(::grpc::ClientContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, std::function<void(::grpc::Status)>) override;
      void loginUser(::grpc::ClientContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, std::function<void(::grpc::Status)>) override;
      void InstantUpload(::grpc::ClientContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>* AsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::RegisterResponse>* PrepareAsyncregisterUserRaw(::grpc::ClientContext* context, const ::rpc::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>* AsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::LoginResponse>* PrepareAsyncloginUserRaw(::grpc::ClientContext* context, const ::rpc::LoginRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>* AsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::rpc::Md5Response>* PrepareAsyncInstantUploadRaw(::grpc::ClientContext* context, const ::rpc::Md5Request& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_registerUser_;
    const ::grpc::internal::RpcMethod rpcmethod_loginUser_;
    const ::grpc::internal::RpcMethod rpcmethod_InstantUpload_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status registerUser(::grpc::ServerContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response);
    virtual ::grpc::Status loginUser(::grpc::ServerContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response);
    virtual ::grpc::Status InstantUpload(::grpc::ServerContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_registerUser() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::rpc::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_loginUser() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloginUser(::grpc::ServerContext* context, ::rpc::LoginRequest* request, ::grpc::ServerAsyncResponseWriter< ::rpc::LoginResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstantUpload() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstantUpload(::grpc::ServerContext* context, ::rpc::Md5Request* request, ::grpc::ServerAsyncResponseWriter< ::rpc::Md5Response>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_registerUser<WithAsyncMethod_loginUser<WithAsyncMethod_InstantUpload<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_registerUser() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::RegisterRequest, ::rpc::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::RegisterRequest* request, ::rpc::RegisterResponse* response) { return this->registerUser(context, request, response); }));}
    void SetMessageAllocatorFor_registerUser(
        ::grpc::MessageAllocator< ::rpc::RegisterRequest, ::rpc::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::RegisterRequest, ::rpc::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerUser(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_loginUser() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::LoginRequest, ::rpc::LoginResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::LoginRequest* request, ::rpc::LoginResponse* response) { return this->loginUser(context, request, response); }));}
    void SetMessageAllocatorFor_loginUser(
        ::grpc::MessageAllocator< ::rpc::LoginRequest, ::rpc::LoginResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::LoginRequest, ::rpc::LoginResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InstantUpload() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::rpc::Md5Request, ::rpc::Md5Response>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::rpc::Md5Request* request, ::rpc::Md5Response* response) { return this->InstantUpload(context, request, response); }));}
    void SetMessageAllocatorFor_InstantUpload(
        ::grpc::MessageAllocator< ::rpc::Md5Request, ::rpc::Md5Response>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::rpc::Md5Request, ::rpc::Md5Response>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstantUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_registerUser<WithCallbackMethod_loginUser<WithCallbackMethod_InstantUpload<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_registerUser() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_loginUser() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstantUpload() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_registerUser() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestregisterUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_loginUser() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestloginUser(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstantUpload() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstantUpload(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_registerUser() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->registerUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* registerUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_loginUser() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->loginUser(context, request, response); }));
    }
    ~WithRawCallbackMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* loginUser(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InstantUpload() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstantUpload(context, request, response); }));
    }
    ~WithRawCallbackMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstantUpload(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_registerUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_registerUser() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::RegisterRequest, ::rpc::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::RegisterRequest, ::rpc::RegisterResponse>* streamer) {
                       return this->StreamedregisterUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_registerUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status registerUser(::grpc::ServerContext* /*context*/, const ::rpc::RegisterRequest* /*request*/, ::rpc::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedregisterUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::RegisterRequest,::rpc::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_loginUser : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_loginUser() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::LoginRequest, ::rpc::LoginResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::LoginRequest, ::rpc::LoginResponse>* streamer) {
                       return this->StreamedloginUser(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_loginUser() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status loginUser(::grpc::ServerContext* /*context*/, const ::rpc::LoginRequest* /*request*/, ::rpc::LoginResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedloginUser(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::LoginRequest,::rpc::LoginResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstantUpload : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstantUpload() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::rpc::Md5Request, ::rpc::Md5Response>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::rpc::Md5Request, ::rpc::Md5Response>* streamer) {
                       return this->StreamedInstantUpload(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstantUpload() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstantUpload(::grpc::ServerContext* /*context*/, const ::rpc::Md5Request* /*request*/, ::rpc::Md5Response* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstantUpload(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::rpc::Md5Request,::rpc::Md5Response>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_loginUser<WithStreamedUnaryMethod_InstantUpload<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_registerUser<WithStreamedUnaryMethod_loginUser<WithStreamedUnaryMethod_InstantUpload<Service > > > StreamedService;
};

}  // namespace rpc


#endif  // GRPC_mysql_5frpc_2eproto__INCLUDED
