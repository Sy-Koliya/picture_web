// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: fdfs_rpc.proto

#include "fdfs_rpc.pb.h"
#include "fdfs_rpc.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace rpc {

static const char* FdfsService_method_names[] = {
  "/rpc.FdfsService/Upload",
  "/rpc.FdfsService/Delete",
};

std::unique_ptr< FdfsService::Stub> FdfsService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FdfsService::Stub> stub(new FdfsService::Stub(channel, options));
  return stub;
}

FdfsService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Upload_(FdfsService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(FdfsService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status FdfsService::Stub::Upload(::grpc::ClientContext* context, const ::rpc::FdfsUploadRequest& request, ::rpc::FdfsUploadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::FdfsUploadRequest, ::rpc::FdfsUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Upload_, context, request, response);
}

void FdfsService::Stub::async::Upload(::grpc::ClientContext* context, const ::rpc::FdfsUploadRequest* request, ::rpc::FdfsUploadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::FdfsUploadRequest, ::rpc::FdfsUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, std::move(f));
}

void FdfsService::Stub::async::Upload(::grpc::ClientContext* context, const ::rpc::FdfsUploadRequest* request, ::rpc::FdfsUploadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Upload_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::FdfsUploadResponse>* FdfsService::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, const ::rpc::FdfsUploadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::FdfsUploadResponse, ::rpc::FdfsUploadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Upload_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::FdfsUploadResponse>* FdfsService::Stub::AsyncUploadRaw(::grpc::ClientContext* context, const ::rpc::FdfsUploadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUploadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status FdfsService::Stub::Delete(::grpc::ClientContext* context, const ::rpc::FdfsDeleteRequest& request, ::rpc::FdfsDeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::rpc::FdfsDeleteRequest, ::rpc::FdfsDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void FdfsService::Stub::async::Delete(::grpc::ClientContext* context, const ::rpc::FdfsDeleteRequest* request, ::rpc::FdfsDeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::rpc::FdfsDeleteRequest, ::rpc::FdfsDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void FdfsService::Stub::async::Delete(::grpc::ClientContext* context, const ::rpc::FdfsDeleteRequest* request, ::rpc::FdfsDeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::rpc::FdfsDeleteResponse>* FdfsService::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::rpc::FdfsDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::rpc::FdfsDeleteResponse, ::rpc::FdfsDeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::rpc::FdfsDeleteResponse>* FdfsService::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::rpc::FdfsDeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

FdfsService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FdfsService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FdfsService::Service, ::rpc::FdfsUploadRequest, ::rpc::FdfsUploadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FdfsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::FdfsUploadRequest* req,
             ::rpc::FdfsUploadResponse* resp) {
               return service->Upload(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FdfsService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< FdfsService::Service, ::rpc::FdfsDeleteRequest, ::rpc::FdfsDeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](FdfsService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::rpc::FdfsDeleteRequest* req,
             ::rpc::FdfsDeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
}

FdfsService::Service::~Service() {
}

::grpc::Status FdfsService::Service::Upload(::grpc::ServerContext* context, const ::rpc::FdfsUploadRequest* request, ::rpc::FdfsUploadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FdfsService::Service::Delete(::grpc::ServerContext* context, const ::rpc::FdfsDeleteRequest* request, ::rpc::FdfsDeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace rpc

