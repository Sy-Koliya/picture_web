// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fdfs_rpc.proto

#include "fdfs_rpc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace rpc {
constexpr FdfsUploadRequest::FdfsUploadRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FdfsUploadRequestDefaultTypeInternal {
  constexpr FdfsUploadRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FdfsUploadRequestDefaultTypeInternal() {}
  union {
    FdfsUploadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FdfsUploadRequestDefaultTypeInternal _FdfsUploadRequest_default_instance_;
constexpr FdfsUploadResponse::FdfsUploadResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fileid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FdfsUploadResponseDefaultTypeInternal {
  constexpr FdfsUploadResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FdfsUploadResponseDefaultTypeInternal() {}
  union {
    FdfsUploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FdfsUploadResponseDefaultTypeInternal _FdfsUploadResponse_default_instance_;
constexpr FdfsDeleteRequest::FdfsDeleteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fileid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FdfsDeleteRequestDefaultTypeInternal {
  constexpr FdfsDeleteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FdfsDeleteRequestDefaultTypeInternal() {}
  union {
    FdfsDeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FdfsDeleteRequestDefaultTypeInternal _FdfsDeleteRequest_default_instance_;
constexpr FdfsDeleteResponse::FdfsDeleteResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : success_(false){}
struct FdfsDeleteResponseDefaultTypeInternal {
  constexpr FdfsDeleteResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FdfsDeleteResponseDefaultTypeInternal() {}
  union {
    FdfsDeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FdfsDeleteResponseDefaultTypeInternal _FdfsDeleteResponse_default_instance_;
}  // namespace rpc
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fdfs_5frpc_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fdfs_5frpc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fdfs_5frpc_2eproto = nullptr;

const uint32_t TableStruct_fdfs_5frpc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::FdfsUploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::FdfsUploadRequest, path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::FdfsUploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::FdfsUploadResponse, fileid_),
  PROTOBUF_FIELD_OFFSET(::rpc::FdfsUploadResponse, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::FdfsDeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::FdfsDeleteRequest, fileid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::rpc::FdfsDeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::rpc::FdfsDeleteResponse, success_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::rpc::FdfsUploadRequest)},
  { 7, -1, -1, sizeof(::rpc::FdfsUploadResponse)},
  { 15, -1, -1, sizeof(::rpc::FdfsDeleteRequest)},
  { 22, -1, -1, sizeof(::rpc::FdfsDeleteResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc::_FdfsUploadRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc::_FdfsUploadResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc::_FdfsDeleteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::rpc::_FdfsDeleteResponse_default_instance_),
};

const char descriptor_table_protodef_fdfs_5frpc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016fdfs_rpc.proto\022\003rpc\"!\n\021FdfsUploadReque"
  "st\022\014\n\004path\030\001 \001(\t\"1\n\022FdfsUploadResponse\022\016"
  "\n\006fileid\030\001 \001(\t\022\013\n\003url\030\002 \001(\t\"#\n\021FdfsDelet"
  "eRequest\022\016\n\006fileid\030\001 \001(\t\"%\n\022FdfsDeleteRe"
  "sponse\022\017\n\007success\030\001 \001(\0102\203\001\n\013FdfsService\022"
  "9\n\006Upload\022\026.rpc.FdfsUploadRequest\032\027.rpc."
  "FdfsUploadResponse\0229\n\006Delete\022\026.rpc.FdfsD"
  "eleteRequest\032\027.rpc.FdfsDeleteResponseb\006p"
  "roto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fdfs_5frpc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fdfs_5frpc_2eproto = {
  false, false, 325, descriptor_table_protodef_fdfs_5frpc_2eproto, "fdfs_rpc.proto", 
  &descriptor_table_fdfs_5frpc_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_fdfs_5frpc_2eproto::offsets,
  file_level_metadata_fdfs_5frpc_2eproto, file_level_enum_descriptors_fdfs_5frpc_2eproto, file_level_service_descriptors_fdfs_5frpc_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_fdfs_5frpc_2eproto_getter() {
  return &descriptor_table_fdfs_5frpc_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_fdfs_5frpc_2eproto(&descriptor_table_fdfs_5frpc_2eproto);
namespace rpc {

// ===================================================================

class FdfsUploadRequest::_Internal {
 public:
};

FdfsUploadRequest::FdfsUploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rpc.FdfsUploadRequest)
}
FdfsUploadRequest::FdfsUploadRequest(const FdfsUploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_path().empty()) {
    path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_path(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rpc.FdfsUploadRequest)
}

inline void FdfsUploadRequest::SharedCtor() {
path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FdfsUploadRequest::~FdfsUploadRequest() {
  // @@protoc_insertion_point(destructor:rpc.FdfsUploadRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FdfsUploadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FdfsUploadRequest::ArenaDtor(void* object) {
  FdfsUploadRequest* _this = reinterpret_cast< FdfsUploadRequest* >(object);
  (void)_this;
}
void FdfsUploadRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FdfsUploadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FdfsUploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.FdfsUploadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FdfsUploadRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc.FdfsUploadRequest.path"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FdfsUploadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.FdfsUploadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_path().data(), static_cast<int>(this->_internal_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.FdfsUploadRequest.path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.FdfsUploadRequest)
  return target;
}

size_t FdfsUploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.FdfsUploadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string path = 1;
  if (!this->_internal_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_path());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FdfsUploadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FdfsUploadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FdfsUploadRequest::GetClassData() const { return &_class_data_; }

void FdfsUploadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FdfsUploadRequest *>(to)->MergeFrom(
      static_cast<const FdfsUploadRequest &>(from));
}


void FdfsUploadRequest::MergeFrom(const FdfsUploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.FdfsUploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_path().empty()) {
    _internal_set_path(from._internal_path());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FdfsUploadRequest::CopyFrom(const FdfsUploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.FdfsUploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdfsUploadRequest::IsInitialized() const {
  return true;
}

void FdfsUploadRequest::InternalSwap(FdfsUploadRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &path_, lhs_arena,
      &other->path_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FdfsUploadRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fdfs_5frpc_2eproto_getter, &descriptor_table_fdfs_5frpc_2eproto_once,
      file_level_metadata_fdfs_5frpc_2eproto[0]);
}

// ===================================================================

class FdfsUploadResponse::_Internal {
 public:
};

FdfsUploadResponse::FdfsUploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rpc.FdfsUploadResponse)
}
FdfsUploadResponse::FdfsUploadResponse(const FdfsUploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fileid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fileid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fileid().empty()) {
    fileid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fileid(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rpc.FdfsUploadResponse)
}

inline void FdfsUploadResponse::SharedCtor() {
fileid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fileid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  url_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FdfsUploadResponse::~FdfsUploadResponse() {
  // @@protoc_insertion_point(destructor:rpc.FdfsUploadResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FdfsUploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fileid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FdfsUploadResponse::ArenaDtor(void* object) {
  FdfsUploadResponse* _this = reinterpret_cast< FdfsUploadResponse* >(object);
  (void)_this;
}
void FdfsUploadResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FdfsUploadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FdfsUploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.FdfsUploadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fileid_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FdfsUploadResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fileid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc.FdfsUploadResponse.fileid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc.FdfsUploadResponse.url"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FdfsUploadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.FdfsUploadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileid = 1;
  if (!this->_internal_fileid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fileid().data(), static_cast<int>(this->_internal_fileid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.FdfsUploadResponse.fileid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fileid(), target);
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.FdfsUploadResponse.url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.FdfsUploadResponse)
  return target;
}

size_t FdfsUploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.FdfsUploadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileid = 1;
  if (!this->_internal_fileid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fileid());
  }

  // string url = 2;
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FdfsUploadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FdfsUploadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FdfsUploadResponse::GetClassData() const { return &_class_data_; }

void FdfsUploadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FdfsUploadResponse *>(to)->MergeFrom(
      static_cast<const FdfsUploadResponse &>(from));
}


void FdfsUploadResponse::MergeFrom(const FdfsUploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.FdfsUploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fileid().empty()) {
    _internal_set_fileid(from._internal_fileid());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FdfsUploadResponse::CopyFrom(const FdfsUploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.FdfsUploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdfsUploadResponse::IsInitialized() const {
  return true;
}

void FdfsUploadResponse::InternalSwap(FdfsUploadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fileid_, lhs_arena,
      &other->fileid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, lhs_arena,
      &other->url_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FdfsUploadResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fdfs_5frpc_2eproto_getter, &descriptor_table_fdfs_5frpc_2eproto_once,
      file_level_metadata_fdfs_5frpc_2eproto[1]);
}

// ===================================================================

class FdfsDeleteRequest::_Internal {
 public:
};

FdfsDeleteRequest::FdfsDeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rpc.FdfsDeleteRequest)
}
FdfsDeleteRequest::FdfsDeleteRequest(const FdfsDeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  fileid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    fileid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_fileid().empty()) {
    fileid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_fileid(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:rpc.FdfsDeleteRequest)
}

inline void FdfsDeleteRequest::SharedCtor() {
fileid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  fileid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FdfsDeleteRequest::~FdfsDeleteRequest() {
  // @@protoc_insertion_point(destructor:rpc.FdfsDeleteRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FdfsDeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  fileid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FdfsDeleteRequest::ArenaDtor(void* object) {
  FdfsDeleteRequest* _this = reinterpret_cast< FdfsDeleteRequest* >(object);
  (void)_this;
}
void FdfsDeleteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FdfsDeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FdfsDeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.FdfsDeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fileid_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FdfsDeleteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string fileid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_fileid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "rpc.FdfsDeleteRequest.fileid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FdfsDeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.FdfsDeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string fileid = 1;
  if (!this->_internal_fileid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_fileid().data(), static_cast<int>(this->_internal_fileid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "rpc.FdfsDeleteRequest.fileid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_fileid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.FdfsDeleteRequest)
  return target;
}

size_t FdfsDeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.FdfsDeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string fileid = 1;
  if (!this->_internal_fileid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_fileid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FdfsDeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FdfsDeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FdfsDeleteRequest::GetClassData() const { return &_class_data_; }

void FdfsDeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FdfsDeleteRequest *>(to)->MergeFrom(
      static_cast<const FdfsDeleteRequest &>(from));
}


void FdfsDeleteRequest::MergeFrom(const FdfsDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.FdfsDeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_fileid().empty()) {
    _internal_set_fileid(from._internal_fileid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FdfsDeleteRequest::CopyFrom(const FdfsDeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.FdfsDeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdfsDeleteRequest::IsInitialized() const {
  return true;
}

void FdfsDeleteRequest::InternalSwap(FdfsDeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &fileid_, lhs_arena,
      &other->fileid_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FdfsDeleteRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fdfs_5frpc_2eproto_getter, &descriptor_table_fdfs_5frpc_2eproto_once,
      file_level_metadata_fdfs_5frpc_2eproto[2]);
}

// ===================================================================

class FdfsDeleteResponse::_Internal {
 public:
};

FdfsDeleteResponse::FdfsDeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:rpc.FdfsDeleteResponse)
}
FdfsDeleteResponse::FdfsDeleteResponse(const FdfsDeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:rpc.FdfsDeleteResponse)
}

inline void FdfsDeleteResponse::SharedCtor() {
success_ = false;
}

FdfsDeleteResponse::~FdfsDeleteResponse() {
  // @@protoc_insertion_point(destructor:rpc.FdfsDeleteResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FdfsDeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FdfsDeleteResponse::ArenaDtor(void* object) {
  FdfsDeleteResponse* _this = reinterpret_cast< FdfsDeleteResponse* >(object);
  (void)_this;
}
void FdfsDeleteResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FdfsDeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FdfsDeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:rpc.FdfsDeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FdfsDeleteResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FdfsDeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:rpc.FdfsDeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:rpc.FdfsDeleteResponse)
  return target;
}

size_t FdfsDeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:rpc.FdfsDeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FdfsDeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FdfsDeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FdfsDeleteResponse::GetClassData() const { return &_class_data_; }

void FdfsDeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FdfsDeleteResponse *>(to)->MergeFrom(
      static_cast<const FdfsDeleteResponse &>(from));
}


void FdfsDeleteResponse::MergeFrom(const FdfsDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:rpc.FdfsDeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FdfsDeleteResponse::CopyFrom(const FdfsDeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:rpc.FdfsDeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FdfsDeleteResponse::IsInitialized() const {
  return true;
}

void FdfsDeleteResponse::InternalSwap(FdfsDeleteResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FdfsDeleteResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_fdfs_5frpc_2eproto_getter, &descriptor_table_fdfs_5frpc_2eproto_once,
      file_level_metadata_fdfs_5frpc_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::rpc::FdfsUploadRequest* Arena::CreateMaybeMessage< ::rpc::FdfsUploadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::FdfsUploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::FdfsUploadResponse* Arena::CreateMaybeMessage< ::rpc::FdfsUploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::FdfsUploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::FdfsDeleteRequest* Arena::CreateMaybeMessage< ::rpc::FdfsDeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::FdfsDeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::rpc::FdfsDeleteResponse* Arena::CreateMaybeMessage< ::rpc::FdfsDeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::rpc::FdfsDeleteResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
